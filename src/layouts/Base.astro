---
import TwSizeIndicator from "@/components/TwSizeIndicator.astro";
import config from "@/config/config.json";
import theme from "@/config/theme.json";
import { plainify } from "@/lib/utils/textConverter";
import Footer from "@/partials/Footer.astro";
import Header from "@/partials/Header.astro";
import "@/styles/main.scss";
import { ViewTransitions } from "astro:transitions";
import SearchModal from "./helpers/SearchModal";
import { getLangFromUrl } from "@/lib/utils/languageParser";
import { SEO } from "astro-seo";

export interface Props {
  title?: string;
  meta_title?: string;
  description?: string;
  image?: string;
  keywords?: string | string[];
  noindex?: boolean;
  canonical?: string;
  lang?: string;
  date?: string;
  type?: "article" | "website" | "model";
  author?: string;
}

const { 
  title, 
  meta_title, 
  description, 
  image, 
  keywords, 
  noindex, 
  canonical, 
  lang, 
  date,
  type = "website",
  author
} = Astro.props;

const language = lang || getLangFromUrl(Astro.url);
const keywordsString = Array.isArray(keywords) ? keywords.join(", ") : keywords;

// 构建 OpenGraph 配置
const openGraphConfig: {
  basic: {
    title: string;
    type: "article" | "website";
    image: string;
    url: string;
  };
  optional: {
    description: string;
    siteName: string;
    locale: string;
    localeAlternate: string[];
  };
  image: {
    alt: string;
    width: number;
    height: number;
    type: string;
  };
  article?: {
    authors: string[];
    tags: string[];
    publishedTime?: string;
    modifiedTime?: string;
  };
} = {
  basic: {
    title: plainify(
      meta_title ? meta_title : title ? title : config.site.title
    ),
    type: type === "model" ? "article" : type,
    image: `${
      image ? image : config.metadata.meta_image
    }`,
    url: `${config.site.base_url}/${Astro.url.pathname.replace("/", "")}`,
  },
  optional: {
    description: plainify(
      description ? description : config.metadata.meta_description
    ),
    siteName: config.site.title,
    locale: language,
    localeAlternate: ["en", "zh"],
  },
  image: {
    alt: title || config.site.title,
    width: 1200,
    height: 630,
    type: "image/jpeg",
  }
};

// 如果是文章或模型页面，添加特定的元数据
if (type === "article" || type === "model") {
  openGraphConfig.article = {
    authors: [author || config.metadata.meta_author],
    tags: Array.isArray(keywords) ? keywords : [],
    publishedTime: date,
    modifiedTime: date,
  };
}
---

<!doctype html>
<html lang={language}>
  <head>
    <SEO
      title={plainify(
        meta_title ? meta_title : title ? title : config.site.title
      )}
      titleTemplate={`%s | ${config.site.title}`}
      titleDefault={config.site.title}
      description={plainify(
        description ? description : config.metadata.meta_description
      )}
      canonical={canonical}
      noindex={noindex}
      openGraph={openGraphConfig}
      twitter={{
        card: "summary_large_image",
        site: config.metadata.meta_author,
        creator: config.metadata.meta_author,
        title: plainify(
          meta_title ? meta_title : title ? title : config.site.title
        ),
        description: plainify(
          description ? description : config.metadata.meta_description
        ),
        image: `${
          image ? image : config.metadata.meta_image
        }`,
        imageAlt: title || config.site.title
      }}
      extend={{
        meta: [
          { name: "theme-name", content: "astroplate" },
          { name: "msapplication-TileColor", content: "#000000" },
          {
            name: "theme-color",
            media: "(prefers-color-scheme: light)",
            content: "#fff",
          },
          {
            name: "theme-color", 
            media: "(prefers-color-scheme: dark)",
            content: "#000",
          },
          { name: "generator", content: Astro.generator },
          {
            name: "viewport",
            content: "width=device-width, initial-scale=1, maximum-scale=5",
          },
          { name: "author", content: config.metadata.meta_author },
          { name: "keywords", content: keywordsString || "" },
          { httpEquiv: "Content-Type", content: "text/html; charset=UTF-8" },
        ],
        link: [
          { rel: "shortcut icon", href: config.site.favicon },
          { rel: "sitemap", href: "/sitemap-index.xml" },
        ],
      }}
    />
    <ViewTransitions />
  </head>
  <body>
    <TwSizeIndicator />
    <Header />
    <SearchModal lang={language} client:load />
    <main id="main-content" class="mb-6">
      <slot />
    </main>
    <Footer />
  </body>
</html>
