---
import ModelCardMini from "./ModelCardMini.astro";
import { getListPage } from "@/lib/contentParser.astro";
import type { ContentEntryMap } from "astro:content";
import {
  getLangFromUrl,
  slugSelector,
} from "@/lib/utils/languageParser";

// const { lang } = Astro.params;
const lang = getLangFromUrl(Astro.url);
const homepage = await getListPage("homepage", lang as keyof ContentEntryMap);
const { discount_free_models } = homepage[0].data;

const { discountModels, freeModels } = Astro.props;
---

<div class="section-sm">
  <div class="container">
    <div class="text-center mb-8">
      <h2 class="text-2xl font-bold tracking-tighter sm:text-4xl md:text-5xl">
        {discount_free_models?.title}
      </h2>
      <p class="mt-4 text-lg text-muted-foreground">
        {discount_free_models?.description}
      </p>
    </div>

    <div class="tabs-container">
      <div class="tabs-header mb-6">
        <button class="tab-button active" data-tab="discount">
          {discount_free_models?.discount_title}
        </button>
        <button class="tab-button" data-tab="free">
          {discount_free_models?.free_title}
        </button>
      </div>

      <div class="tabs-content pb-6">
        <div class="tab-pane active" id="discount">
          <div class="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
            {discountModels.slice(0, 6).map((model: any) => (
              <ModelCardMini data={model} />
            ))}
          </div>
          <div class="text-center mt-6">
            <a href={slugSelector(`/tags/discount`, lang)} class="view-more-link">
              {discount_free_models?.view_more}
            </a>
          </div>
        </div>
        <div class="tab-pane" id="free">
          <div class="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
            {freeModels.slice(0, 6).map((model: any) => (
              <ModelCardMini data={model} />
            ))}
          </div>
          <div class="text-center mt-6">
            <a href={slugSelector(`/tags/free`, lang)}  class="view-more-link">
              {discount_free_models?.view_more}
            </a>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<style>
  .tabs-header {
    display: flex;
    justify-content: center;
    gap: 2rem;
    border-bottom: 2px solid #eee;
    padding: 0.5rem 0;
  }

  .tab-button {
    padding: 0.75rem 2.5rem;
    font-weight: 700;
    font-size: 1.25rem;
    color: #666;
    border: none;
    background: none;
    cursor: pointer;
    position: relative;
    transition: all 0.3s ease;
    text-transform: uppercase;
    letter-spacing: 0.5px;
  }

  .tab-button::after {
    content: '';
    position: absolute;
    bottom: -2px;
    left: 0;
    width: 100%;
    height: 3px;
    background-color: transparent;
    transition: all 0.3s ease;
  }

  .tab-button:hover {
    color: #000;
    transform: translateY(-1px);
  }

  .tab-button.active {
    color: #000;
    transform: translateY(-1px);
  }

  .tab-button.active::after {
    background-color: #000;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  }

  /* 添加回 tab-pane 相关样式 */
  .tab-pane {
    display: none;
    animation: fadeIn 0.5s ease-in-out;
  }

  .tab-pane.active {
    display: block;
  }

  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translateY(10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  /* 暗色模式调整 */
  :global(.dark) .tab-button {
    color: #999;
  }

  :global(.dark) .tab-button:hover {
    color: #fff;
  }

  :global(.dark) .tab-button.active {
    color: #fff;
  }

  :global(.dark) .tab-button.active::after {
    background-color: #fff;
    box-shadow: 0 1px 3px rgba(255, 255, 255, 0.2);
  }

  :global(.dark) .tabs-header {
    border-bottom-color: #333;
  }

  .view-more-link {
    display: inline-block;
    padding: 0.5rem 2rem;
    border: 2px solid #000;
    border-radius: 0.5rem;
    font-weight: 600;
    transition: all 0.3s ease;
  }

  .view-more-link:hover {
    background-color: #000;
    color: #fff;
    transform: translateY(-2px);
  }

  /* 暗色模式 */
  :global(.dark) .view-more-link {
    border-color: #fff;
  }

  :global(.dark) .view-more-link:hover {
    background-color: #fff;
    color: #000;
  }
</style>

<script>
  // astro:page-load 事件在页面加载时触发
  document.addEventListener("astro:page-load", () => {
    const tabButtons = document.querySelectorAll('.tab-button');
    const tabPanes = document.querySelectorAll('.tab-pane');

    function switchTab(tabId: string) {
      // 移除所有活动状态
      tabButtons.forEach(button => button.classList.remove('active'));
      tabPanes.forEach(pane => pane.classList.remove('active'));

      // 添加新的活动状态
      const activeButton = document.querySelector(`[data-tab="${tabId}"]`);
      const activePane = document.getElementById(tabId);
      
      activeButton?.classList.add('active');
      activePane?.classList.add('active');
    }

    // 为每个标签按钮添加点击事件
    tabButtons.forEach(button => {
      button.addEventListener('click', () => {
        const tabId = button.getAttribute('data-tab');
        if (tabId) switchTab(tabId);
      });
    });
  });
</script> 