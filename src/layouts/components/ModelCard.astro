---
import config from "@/config/config.json";
import {
  getLangFromUrl,
  slugSelector,
} from "@/lib/utils/languageParser";
import { humanize, plainify, slugify } from "@/lib/utils/textConverter";
import { formatNumber, formatTokens } from "@/lib/utils/formatUtils";
import { MdTextFields } from "react-icons/md";
import CopyIconButton from '../helpers/CopyIconButton';
import { Image } from "astro:assets";

const { summary_length }: { summary_length: number; model_folder: string } =
  config.settings;
const { data } = Astro.props;
const {
  title,
  id,
  context,
  input,
  output,
  description,
  image,
  categories,
  date,
  author,
  img,
  request,
  is_active,
  discount,
  is_free,
  model_tags,
} = data.data;

const lang = getLangFromUrl(Astro.url);

const slugParts = data.slug.split("/");
slugParts[0] = "models";
const modifiedSlug = slugParts.join("/");
data.slug = modifiedSlug;

---

<div class="relative bg-body dark:bg-darkmode-body p-6 rounded-lg shadow-md hover:shadow-lg transition-shadow duration-200">
  {(discount || is_free) && (
    <div class="badge-container absolute -top-2 -right-2 z-10 flex gap-1">
      {discount < 1 && (
        <span class="badge inline-flex items-center px-3 py-1 rounded-full text-sm font-bold bg-gradient-to-r from-red-500 to-pink-500 text-white shadow-lg transform hover:scale-105 transition-transform duration-200">
          {Math.round((1-discount) * 100)}% OFF
        </span>
      )}
      {is_free && (
        <span class="badge inline-flex items-center px-3 py-1 rounded-full text-sm font-bold bg-gradient-to-r from-green-400 to-emerald-500 text-white shadow-lg transform hover:scale-105 transition-transform duration-200">
          FREE
        </span>
      )}
    </div>
  )}

  <div class="flex justify-between items-center mb-3">
    <h3 class="text-2xl font-semibold">
      <a href={slugSelector(`/${data.slug}`, lang)} class="text-primary dark:text-darkmode-primary hover:text-primary/70 transition-colors duration-200">
        {title}
      </a>
    </h3>

    <span class="text-gray-500 dark:text-gray-400 flex items-center">
      <MdTextFields className={"mr-2"} />
      {
        categories.map((category: string, index: number) => (
          <a href={slugSelector(`/categories/${slugify(category)}`, lang)} 
             class="hover:text-primary dark:hover:text-darkmode-primary transition-colors duration-200">
            {humanize(category)}
            {index !== categories.length - 1 && ", "}
          </a>
        ))
      }
    </span>
  </div>

  {model_tags && model_tags.length > 0 && (
    <div class="flex flex-wrap gap-2 mb-4">
      {model_tags.map((tag: string) => (
        <a 
          href={slugSelector(`/tags/${slugify(tag)}`, lang)}
          class="group inline-flex items-center px-2.5 py-0.5 text-xs font-medium rounded-full 
          bg-primary/5 dark:bg-primary/10 
          text-primary/70 dark:text-primary/60
          border border-primary/10 dark:border-primary/20
          hover:bg-primary/10 dark:hover:bg-primary/20 
          hover:text-primary dark:hover:text-primary
          hover:border-primary/30 dark:hover:border-primary/40
          hover:shadow-sm hover:-translate-y-0.5
          transition-all duration-200 ease-in-out"
        >
          <span class="text-primary/50 dark:text-primary/40 mr-0.5 group-hover:text-primary/70">#</span>
          {tag}
        </a>
      ))}
    </div>
  )}

  {is_active && (
    <div class="flex items-center mb-4">
      <CopyIconButton client:load textToCopy={id}>
        <span class="mr-2 font-medium text-base text-primary dark:text-darkmode-primary border-b border-dashed border-primary/30 hover:border-primary/60 transition-colors duration-200">
          ID: {id}
        </span>
      </CopyIconButton>
    </div>
  )}

  <p class="text-base text-gray-400 dark:text-gray-600 mb-6 leading-relaxed">
    {plainify(data.body?.slice(0, Number(summary_length)))}...
  </p>

  <div class="text-sm text-gray-500 dark:text-gray-400 flex flex-wrap gap-x-6 gap-y-3">
    <span class="flex items-center">
      <a href={slugSelector(`/authors/${slugify(author)}`, lang)} 
         class="flex items-center hover:text-primary dark:hover:text-darkmode-primary transition-colors duration-200">
        {image && (
          <div class="w-6 h-6 mr-2 rounded-full overflow-hidden border-2 border-gray-200 dark:border-gray-600 hover:border-gray-400 dark:hover:border-gray-400 transition-all duration-200 hover:scale-110">
            <Image
              src={image}
              alt={title}
              width={24}
              height={24}
              class="w-full h-full object-cover"
            />
          </div>
        )}
        {humanize(author)}
      </a>
    </span>
    
    <span class="flex items-center border-l border-gray-200 dark:border-gray-700 pl-3">
      {formatNumber(context)} context
    </span>
    
    <span class="flex items-center border-l border-gray-200 dark:border-gray-700 pl-3">
      ${formatTokens(input * 1000000)} input tokens
    </span>
    
    <span class="flex items-center border-l border-gray-200 dark:border-gray-700 pl-3">
      ${formatTokens(output * 1000000)} output tokens
    </span>
    
    {
      img > 0 && (
        <span class="flex items-center border-l border-gray-200 dark:border-gray-700 pl-3">
          ${formatTokens(img)} image tokens
        </span>
      )
    }
    {
      request > 0 && (
        <span class="flex items-center border-l border-gray-200 dark:border-gray-700 pl-3">
          ${formatTokens(request)} request tokens
        </span>
      )
    }
  </div>
</div>

<style>
  .badge-container {
    transform-origin: center;
    transition: transform 0.3s ease;
  }

  .badge {
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);
    transition: all 0.3s ease;
  }

  .badge:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
  }
</style>
