---
import config from "@/config/config.json";
import dateFormat from "@/lib/utils/dateFormat";
import {
  getLangFromUrl,
  getTranslations,
  slugSelector,
} from "@/lib/utils/languageParser";
import { humanize, plainify, slugify } from "@/lib/utils/textConverter";
import { formatNumber, formatTokens } from "@/lib/utils/formatUtils";
import type { ContentEntryMap } from "astro:content";
import { FaRegFolder, FaRegUserCircle } from "react-icons/fa";
import { MdTextFields } from "react-icons/md";
import ImageMod from "./ImageMod.astro";
import CopyIconButton from '../helpers/CopyIconButton';

const { summary_length }: { summary_length: number; model_folder: string } =
  config.settings;
const { data } = Astro.props;
const {
  title,
  id,
  context,
  input,
  output,
  description,
  image,
  categories,
  date,
  author,
  img,
  request,
  is_active,
} = data.data;

const lang = getLangFromUrl(Astro.url);
const { read_more } = await getTranslations(lang as keyof ContentEntryMap);

const slugParts = data.slug.split("/");
slugParts[0] = "models";
const modifiedSlug = slugParts.join("/");
data.slug = modifiedSlug;

---

<div class="bg-body dark:bg-darkmode-body p-6 rounded-lg shadow-md hover:shadow-lg transition-shadow duration-200">
  <div class="flex justify-between items-center mb-3">
    <h3 class="text-2xl font-semibold">
      <a href={slugSelector(`/${data.slug}`, lang)} class="text-primary dark:text-darkmode-primary hover:text-primary/70 transition-colors duration-200">
        {title}
      </a>
    </h3>

    <span class="text-gray-500 dark:text-gray-400 flex items-center">
      <MdTextFields className={"mr-2"} />
      {
        categories.map((category: string, index: number) => (
          <a href={slugSelector(`/categories/${slugify(category)}`, lang)} 
             class="hover:text-primary dark:hover:text-darkmode-primary transition-colors duration-200">
            {humanize(category)}
            {index !== categories.length - 1 && ", "}
          </a>
        ))
      }
    </span>
  </div>

{is_active && (
  <div class="flex items-center mb-4">
    <CopyIconButton client:load textToCopy={id}>
      <span class="mr-2 font-medium text-base text-primary dark:text-darkmode-primary border-b border-dashed border-primary/30 hover:border-primary/60 transition-colors duration-200">
        ID: {id}
      </span>
      </CopyIconButton>
    </div>
  )}

  <p class="text-base text-gray-400 dark:text-gray-600 mb-6 leading-relaxed">
    {plainify(data.body?.slice(0, Number(summary_length)))}...
  </p>

  <div class="text-sm text-gray-500 dark:text-gray-400 flex flex-wrap gap-x-6 gap-y-3">
    <span class="flex items-center">
      <a href={slugSelector(`/authors/${slugify(author)}`, lang)} 
         class="flex items-center hover:text-primary dark:hover:text-darkmode-primary transition-colors duration-200">
        <FaRegUserCircle className={"mr-2"} />
        {humanize(author)}
      </a>
    </span>
    
    <span class="flex items-center border-l border-gray-200 dark:border-gray-700 pl-3">
      {formatNumber(context)} context
    </span>
    
    <span class="flex items-center border-l border-gray-200 dark:border-gray-700 pl-3">
      ${formatTokens(input * 1000000)} input tokens
    </span>
    
    <span class="flex items-center border-l border-gray-200 dark:border-gray-700 pl-3">
      ${formatTokens(output * 1000000)} output tokens
    </span>
    
    {
      img > 0 && (
        <span class="flex items-center border-l border-gray-200 dark:border-gray-700 pl-3">
          ${formatTokens(img)} image tokens
        </span>
      )
    }
    {
      request > 0 && (
        <span class="flex items-center border-l border-gray-200 dark:border-gray-700 pl-3">
          ${formatTokens(request)} request tokens
        </span>
      )
    }
  </div>
</div>
