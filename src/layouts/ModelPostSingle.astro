---
import Share from "@/components/Share.astro";
import config from "@/config/config.json";
import { getSinglePage } from "@/lib/contentParser.astro";
import dateFormat from "@/lib/utils/dateFormat";
import { slugSelector } from "@/lib/utils/languageParser";
import similarItems from "@/lib/utils/similarItems";
import { humanize, markdownify, slugify } from "@/lib/utils/textConverter";
import type { ContentEntryMap } from "astro:content";
import { FaRegClock, FaRegFileAlt, FaRegFolder, FaRegUserCircle } from "react-icons/fa";
import { IoChatbubbleEllipsesOutline } from "react-icons/io5";
import { LuFolderInput, LuFolderOutput, LuImage } from "react-icons/lu";
import ImageMod from "./components/ImageMod.astro";
import ModelCard from "./components/ModelCard.astro";
import CopyIconButton from "./helpers/CopyIconButton";
import { formatNumber, formatTokens } from "@/lib/utils/formatUtils";

const { default_language } = config.settings;

const { post, category = "models" } = Astro.props;
const COLLECTION_FOLDER = category;
let { lang } = Astro.params;

if (!lang) {
  lang = default_language;
}

const posts = await getSinglePage(
  COLLECTION_FOLDER,
  lang as keyof ContentEntryMap
);
const similarPosts = similarItems(post, posts);
const { Content } = await post.render();
const { title, description, author, categories, image, date, tags, id, context, input, output, img, request } = post.data;

// console.log(post.data);

---

<section class="section pt-7">
  <div class="container">
    <div class="row justify-center">
      <article class="lg:col-10">
        <div class="mb-10 flex justify-center">
          {image && (
            <ImageMod src={image} alt={title} width={500} height={300} class="mx-auto" />
          )}
        </div>
        
        <div class="mb-6">
          <div class="flex items-center gap-2 mb-4">
            <div class="flex-1">
              <h1 set:html={markdownify(title)} class="h2 mb-0" />
              <div class="flex items-center text-lg text-gray-700 dark:text-gray-400 mt-2">
                <span class="mr-2 underline">ID: {id}</span>
                <CopyIconButton client:load textToCopy={id} />
              </div>
            </div>
            
          </div>
        </div>

        <ul class="mb-4 flex flex-wrap gap-x-6 gap-y-2 text-sm text-gray-500 dark:text-gray-400">
          <li class="inline-flex items-center">
            <FaRegFileAlt className={"mr-2"} />
            {formatNumber(context)} Context
          </li>
          <li class="inline-flex items-center">
            <LuFolderInput className={"mr-2"} />
            {formatTokens(input * 1000000)} Input Tokens
          </li>
          <li class="inline-flex items-center">
            <LuFolderOutput className={"mr-2"} />
            {formatTokens(output * 1000000)} Output Tokens
          </li>
          {img > 0 && (
            <li class="inline-flex items-center">
              <LuImage className={"mr-2"} />
              {formatTokens(img)} Image Tokens
            </li>
          )}
          {request > 0 && (
            <li class="inline-flex items-center">
              <FaRegFileAlt className={"mr-2"} />
              {formatTokens(request)} Request Tokens
            </li>
          )}
        </ul>

        <ul class="mb-4 text-sm text-gray-400">
          <li class="mr-4 inline-block">
            <a href={slugSelector(`/authors/${slugify(author)}`, lang)}>
              <FaRegUserCircle className={"mr-2 -mt-1 inline-block"} />
              {humanize(author)}
            </a>
          </li>
          <li class="mr-4 inline-block">
            <FaRegFolder className={"mr-2 -mt-1 inline-block"} />
            {
              categories.map((category: string, index: number) => (
                <a
                  href={slugSelector(`/categories/${slugify(category)}`, lang)}
                >
                  {humanize(category)}
                  {index !== categories.length - 1 && ","}
                </a>
              ))
            }
          </li>
          <li class="mr-4 inline-block">
            <FaRegClock className={"mr-2 -mt-1 inline-block"} />
            {dateFormat(date)}
          </li>
        </ul>
        <div class="flex items-center justify-between mb-8">
          <a 
            href={`https://chat.rifx.online/?model-id=${id}`}
            class="inline-flex items-center whitespace-nowrap px-6 py-3 bg-primary text-white dark:bg-darkmode-primary dark:text-black rounded-lg hover:bg-primary-dark transition-all duration-300 text-base font-medium self-start mt-1 gap-2 group"
            target="_blank"
            rel="noopener noreferrer"
          >
            <IoChatbubbleEllipsesOutline className="text-xl transition-all duration-300 group-hover:animate-wiggle" />
            Chat with Model
          </a>
        </div>
        <div class="content mb-10">
          <Content />
        </div>
        <div class="row items-start justify-between">
          <div class="mb-10 flex items-center lg:col-5 lg:mb-0">
            <h5 class="mr-3 whitespace-nowrap">Tags :</h5>
            <ul class="flex flex-wrap">
              {
                tags.map((tag: string) => (
                  <li class="inline-block">
                    <a
                      class="m-1 block rounded bg-theme-light px-3 py-1 hover:bg-primary hover:text-white dark:bg-darkmode-theme-light dark:hover:bg-darkmode-primary dark:hover:text-dark"
                      href={slugSelector(`/tags/${slugify(tag)}`, lang)}
                    >
                      {humanize(tag)}
                    </a>
                  </li>
                ))
              }
            </ul>
          </div>
          <div class="flex items-center lg:col-4">
            <h5 class="mr-3">Share :</h5>
            <Share
              className="social-icons"
              title={title}
              description={description}
              slug={post.slug}
            />
          </div>
        </div>
        <!-- <Disqus className="mt-20" client:load /> -->
      </article>
    </div>

    <!-- Related posts -->
    <div class="section pb-0">
      <h2 class="h3 mb-12 text-center">Related Posts</h2>
      <div class="row justify-center">
        {
          similarPosts.map((post, index) => (
            <div class={`lg:col-6 md:col-6 mb-14 ${index % 2 === 0 ? 'clear-left' : ''}`}>
              <ModelCard data={post} />
            </div>
          ))
        }
      </div>
    </div>
  </div>
</section>
