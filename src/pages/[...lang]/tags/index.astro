---
import config from "@/config/config.json";
import Base from "@/layouts/Base.astro";
import { getAllTaxonomy, getTaxonomy } from "@/lib/taxonomyParser.astro";
import { slugSelector, supportedLang } from "@/lib/utils/languageParser";
import { humanize } from "@/lib/utils/textConverter";
import PageHeader from "@/partials/PageHeader.astro";
import type { ContentEntryMap } from "astro:content";

export const prerender = false;
const { default_language } = config.settings;
const cates = config.categories;

export function getStaticPaths() {
  const paths = supportedLang.map((lang) => ({
    params: { lang: lang || undefined },
  }));
  return paths;
}

let { lang } = Astro.params;

if (!lang) {
  lang = default_language;
}
const langCollection: keyof ContentEntryMap = lang as keyof ContentEntryMap;

let tags: string[] = [];
let allTags: string[] = [];

for (const cate of cates) {
  const sub_tags = await getTaxonomy(langCollection, "tags", cate);
  const sub_allTags = await getAllTaxonomy(langCollection, "tags", cate);

  tags.push(...sub_tags);
  allTags.push(...sub_allTags);
}

---

<Base title={"Tags"}>
  <PageHeader title={"Tags"} />
  <section class="section">
    <div class="container text-center">
      <ul>
        {
          tags.map((tag: any) => {
            const count = allTags.filter((c) => c === tag).length;
            return (
              <li class="m-3 inline-block">
                <a
                  href={slugSelector(`/tags/${tag}`, lang)}
                  class="block rounded bg-theme-light px-4 py-2 text-xl text-dark dark:bg-darkmode-theme-light dark:text-darkmode-dark"
                >
                  {humanize(tag)}{" "}
                  <span class="ml-2 rounded bg-body px-2 dark:bg-darkmode-body">
                    {count}
                  </span>
                </a>
              </li>
            );
          })
        }
      </ul>
    </div>
  </section>
</Base>
