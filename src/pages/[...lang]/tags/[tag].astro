---
import BlogCard from "@/components/BlogCard.astro";
import ModelCard from "@/components/ModelCard.astro";
import config from "@/config/config.json";
import Base from "@/layouts/Base.astro";
import { getSinglePage } from "@/lib/contentParser.astro";
import { getTaxonomy } from "@/lib/taxonomyParser.astro";
import { supportedLang } from "@/lib/utils/languageParser";
import { sortByDate } from "@/lib/utils/sortFunctions";
import taxonomyFilter from "@/lib/utils/taxonomyFilter";
import PageHeader from "@/partials/PageHeader.astro";
import type { ContentEntryMap } from "astro:content";

export const prerender = true;
export const cates = config.categories;

// get all static paths for tags
export async function getStaticPaths() {
  const { default_language } = config.settings;

  const paths = await Promise.all(
    supportedLang.map(async (lang) => {
      
      let tags: string[] = [];  
      for (const cate of cates) {
        const sub_tags = await getTaxonomy(lang as keyof ContentEntryMap, "tags", cate);
        tags.push(...sub_tags);
      }

      return tags.map((tag) => ({
        params: {
          lang: lang || undefined,
          tag: tag,
        },
        props: {
          tag,
        },
      }));
    })
  );


  let defaultTags: string[] = [];
  for (const cate of cates) {
    const sub_tags = await getTaxonomy(
      default_language as keyof ContentEntryMap,
      "tags",
      cate
    );
    defaultTags.push(...sub_tags);
  }

  // Handle default path (no lang)
  const defaultPaths = defaultTags.map((tag) => ({
    params: {
      lang: undefined,
      tag: tag,
    },
    props: {
      tag,
    },
  }));

  return [...paths.flat(), ...defaultPaths];
}

const { tag, lang } = Astro.params;

// get posts by tag
let posts: any[] = [];  
for (const cate of cates) {
  const sub_posts = await getSinglePage(cate as keyof ContentEntryMap, lang as keyof ContentEntryMap);
  posts.push(...sub_posts);
}

const filterByTags = taxonomyFilter(posts, "tags", tag!);
const sortedPosts = sortByDate(filterByTags);
---

<Base title={tag}>
  <PageHeader title={tag} />
  <div class="section-sm pb-0">
    <div class="container">
      <div class="row">
        {
          sortedPosts.map((post) => (
            <div class="mb-14 md:col-6 lg:col-6">
              { post.collection === "blog" && (
                  <BlogCard data={post} />
              )}
              { post.collection === "models" && (
                  <ModelCard data={post} />
              )}
            </div>
          ))
        }
      </div>
    </div>
  </div>
</Base>
