---
import BlogCard from "@/components/BlogCard.astro";
import ModelCard from "@/components/ModelCard.astro";
import config from "@/config/config.json";
import Base from "@/layouts/Base.astro";
import { getSinglePage } from "@/lib/contentParser.astro";
import { getTaxonomy } from "@/lib/taxonomyParser.astro";
import { supportedLang } from "@/lib/utils/languageParser";
import { sortByDate } from "@/lib/utils/sortFunctions";
import taxonomyFilter from "@/lib/utils/taxonomyFilter";
import PageHeader from "@/partials/PageHeader.astro";
import type { ContentEntryMap } from "astro:content";

export const prerender = true;
export const cates = config.categories;

// get all static paths for categories
export async function getStaticPaths() {
  const { default_language } = config.settings;

  const paths = await Promise.all(
    supportedLang.map(async (lang) => {

      let categories: string[] = [];
      for (const cate of cates) {
        const sub_categories = await getTaxonomy(
          lang as keyof ContentEntryMap,
          "categories",
          cate
        );
        categories.push(...sub_categories);
      }

      return categories.map((category) => ({
        params: {
          lang: lang || undefined,
          category: category,
        },
        props: {
          category,
        },
      }));
    })
  );

  // Handle default path (no lang)
  let defaultCategories: string[] = [];
  for (const cate of cates) {
    const sub_categories = await getTaxonomy(
      default_language as keyof ContentEntryMap,
      "categories",
      cate
    );
    defaultCategories.push(...sub_categories);
  }

  const defaultPaths = defaultCategories.map((category) => ({
    params: {
      lang: undefined,
      category: category,
    },
    props: {
      category,
    },
  }));

  return [...paths.flat(), ...defaultPaths];
}

const { category, lang } = Astro.params;

// get posts by category
let posts: any[] = [];  
for (const cate of cates) {
  const sub_posts = await getSinglePage(cate as keyof ContentEntryMap, lang as keyof ContentEntryMap);
  posts.push(...sub_posts);
}


const filterByCategories = taxonomyFilter(posts, "categories", category!);
const sortedPosts = sortByDate(filterByCategories);
---

<Base title={category}>
  <PageHeader title={category} />
  <div class="section-sm pb-0">
    <div class="container">
      <div class="row">
        {
          sortedPosts.map((post) => (
            <div class="mb-14 md:col-6 lg:col-6">
              { post.collection === "blog" && (
                  <BlogCard data={post} />
              )}
              { post.collection === "models" && (
                  <ModelCard data={post} />
              )}
            </div>
          ))
        }
        
      </div>
    </div>
  </div>
</Base>
