---
import ImageMod from "@/components/ImageMod.astro";
import Base from "@/layouts/Base.astro";
import { getListPage, getSinglePage } from "@/lib/contentParser.astro";
import { supportedLang } from "@/lib/utils/languageParser";
import { markdownify } from "@/lib/utils/textConverter";
import CallToAction from "@/partials/CallToAction.astro";
import Testimonial from "@/partials/Testimonial.astro";
import type { Feature } from "@/types";
import type { ContentEntryMap } from "astro:content";
import { FaCheck } from "react-icons/fa";
import { Image } from 'astro:assets';
import { Copy, Check } from 'lucide-react';

const aiApiLink = "https://api.rifx.online/v1";

export const prerender = true;

export function getStaticPaths() {
  const paths = supportedLang.map((lang) => ({
    params: { lang: lang || undefined },
  }));
  return paths;
}

const { lang } = Astro.params;
const homepage = await getListPage("homepage", lang as keyof ContentEntryMap);
const { banner, features } = homepage[0].data;

const testimonial = await getSinglePage(
  "sections",
  lang as keyof ContentEntryMap,
  "testimonial"
);

const call_to_action = await getSinglePage(
  "sections",
  lang as keyof ContentEntryMap,
  "call-to-action"
);
---

<Base>
  <!-- Banner -->
  <section class="section pt-14">
    <div class="container">
      <div class="row justify-center">
        <div class="lg:col-7 md:col-9 mb-8 text-center">
          <h1
            set:html={markdownify(banner.title)}
            class="mb-4 text-h3 lg:text-h1"
          />
          <p set:html={markdownify(banner.content)} class="mb-8" />
          {
            banner.button.enable && (
              <a
                class="btn btn-primary"
                href={banner.button.link}
                target={
                  banner.button.link.startsWith("http") ? "_blank" : "_self"
                }
                rel="noopener"
              >
                {banner.button.label}
              </a>
            )
          }
        </div>
        {
          banner.image && (
            <div class="col-12">
              <ImageMod
                src={banner.image}
                height={380}
                width={1200}
                alt="banner"
                format="webp"
              />
            </div>
          )
        }
      </div>
    </div>
  </section>
  <!-- /Banner -->

  <!-- Features -->
  {
    features.map((feature: Feature, index: number) => (
      <section class={`section-sm ${index % 2 === 0 && "bg-gradient"}`}>
        <div class="container">
          <div class="row items-center justify-between">
            <div
              class={`mb:md-0 mb-6 md:col-5 ${index % 2 !== 0 && "md:order-2"}`}
            >
              <ImageMod
                src={feature.image}
                height={480}
                width={520}
                alt={feature.title}
                format="webp"
              />
            </div>
            <div class={`md:col-7 lg:col-6 ${index % 2 !== 0 && "md:order-1"}`}>
              <h2 set:html={markdownify(feature.title)} class="mb-4" />
              <p set:html={markdownify(feature.content)} class="mb-8 text-lg" />
              <ul>
                {feature.bulletpoints.map((bullet: string) => (
                  <li class="relative mb-4 pl-6">
                    <FaCheck className={"absolute left-0 top-1.5"} />
                    <span set:html={markdownify(bullet)} />
                  </li>
                ))}
              </ul>
              {feature.button.enable && (
                <a class="btn btn-primary mt-5" href={feature.button.link}>
                  {feature.button.label}
                </a>
              )}
            </div>
          </div>
        </div>
      </section>
    ))
  }
  <!-- /Features -->
  <div class="container mx-auto px-4 py-16 md:py-24 lg:py-32">
    <div class="grid gap-8 md:grid-cols-2 md:gap-12 items-center">
      <div class="order-2 md:order-1">
        <Image
          src="/images/service-1.png"
          alt="AI API Illustration"
          width={500}
          height={500}
          class="rounded-lg shadow-lg"
        />
      </div>
      <div class="order-1 md:order-2 space-y-6">
        <h2 class="text-3xl font-bold tracking-tighter sm:text-4xl md:text-5xl">
          Empower Your Apps with AI
        </h2>
        <p class="text-xl text-muted-foreground">
          Integrate cutting-edge AI capabilities into your applications with our powerful API. 
          From natural language processing to computer vision, unlock the potential of AI with just a few lines of code.
        </p>
        <div class="flex space-x-2">
          <input
            value={aiApiLink}
            readonly
            class="flex-grow"
            placeholder="AI API Endpoint"
          />
          <button id="copyButton">
            <span id="copyIcon" class="inline-block"><Copy /></span>
            <span id="copyText" class="ml-2">Copy API Link</span>
          </button>
        </div>
        <p class="text-sm text-muted-foreground">
          Get started quickly by copying the API link above and referring to our comprehensive documentation.
        </p>
      </div>
    </div>
  </div>

  <Testimonial testimonial={testimonial[0]} />
  <CallToAction call_to_action={call_to_action[0]} />
</Base>
<script>
  const copyButton = document.getElementById('copyButton');
  const copyIcon = document.getElementById('copyIcon');
  const copyText = document.getElementById('copyText');
  const aiApiLink = "https://api.example.com/v1/ai-endpoint";

  if (copyButton && copyIcon && copyText) {
    copyButton.addEventListener('click', () => {
      navigator.clipboard.writeText(aiApiLink).then(() => {
        copyIcon.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="h-4 w-4"><polyline points="20 6 9 17 4 12"></polyline></svg>';
        copyText.textContent = 'Copied!';

        setTimeout(() => {
          copyIcon.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="h-4 w-4"><rect x="9" y="9" width="13" height="13" rx="2" ry="2"></rect><path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"></path></svg>';
          copyText.textContent = 'Copy API Link';
        }, 2000);
      });
    });
  }
</script>