---
import Base from "@/layouts/Base.astro";

import { FurzSDK } from 'furz-sdk';
export const prerender = false;

const { env } = Astro.locals.runtime;
// 初始化 FurzSDK (假设您已经在某处设置了数据库连接)
const furz = FurzSDK.initialize(env.DB);

// 获取当前用户ID (这里假设已经有了用户认证系统)
const { userId } = Astro.locals.auth()

// 查询用户的所有API密钥
const userKeys = await furz.userKeyService.getByUserId(userId as string);

// 处理添加新密钥的POST请求
if (Astro.request.method === 'POST') {
  const formData = await Astro.request.formData();
  let title = formData.get('title') as string;

  if (!title) {
    title = 'New Key';
  }

  await furz.userKeyService.create({ user_id: userId as string, title: title});
  
  return Astro.redirect('/user/keys');
}

// 处理删除密钥的DELETE请求
if (Astro.request.method === 'DELETE') {
  const keyId = Astro.url.searchParams.get('id');
  if (keyId) {
    await furz.userKeyService.deleteWithUserId(keyId as string, userId as string)
  }
  return new Response(null, { status: 204 });
}
---

<Base
  title="API Keys"
>
  <div class="container mx-auto px-4 py-8 mb-5">
    <h1 class="text-2xl font-bold mb-6">API Keys</h1>
    
    <button id="createKeyBtn" class="bg-black text-white px-4 py-2 rounded hover:bg-gray-800 mb-8">
      Create New Key
    </button>
    
    <div class="bg-white rounded-lg shadow-md overflow-hidden">
      <table class="w-full">
        <thead>
          <tr class="bg-gray-50 text-gray-600 uppercase text-base leading-normal">
            <th class="py-4 px-6 text-left">#</th>
            <th class="py-4 px-6 text-left">Title</th>
            <th class="py-4 px-6 text-left">Key</th>
            <th class="py-4 px-6 text-left">Created Date</th>
            <th class="py-4 px-6 text-left">Actions</th>
          </tr>
        </thead>
        <tbody class="text-gray-600 text-base">
          {userKeys.map((key, index) => (
            <tr class="border-b border-gray-200 hover:bg-gray-100">
              <td class="py-4 px-6 text-left whitespace-nowrap">
                <div class="flex items-center">
                  <span class="font-medium">{index + 1}</span>
                </div>
              </td>
              <td class="py-4 px-6 text-left">
                <div class="flex items-center">
                  <span>{key.title}</span>
                </div>
              </td>
              <td class="py-4 px-6 text-left">
                <div class="flex items-center">
                  <span class="font-bold">{key.api_key.slice(0, 6) + '***' + key.api_key.slice(-6)}</span>
                </div>
              </td>
              <td class="py-4 px-6 text-left">
                <div class="flex items-center">
                  {(() => {
                    if (key.created) {
                      const date = new Date(key.created * 1000);
                      return date.toLocaleString('en-US', {
                        year: 'numeric',
                        month: 'short',
                        day: 'numeric',
                        hour: '2-digit',
                        minute: '2-digit',
                        second: '2-digit',
                        hour12: true
                      });
                    }
                    return 'N/A';
                  })()}
                </div>
              </td>
              <td class="py-4 px-6 text-left">
                <div class="flex items-center">
                  <button
                    onclick={`showDeleteConfirmation('${key.id}')`}
                    class="text-red-500 hover:text-red-700"
                  >
                    Revoke
                  </button>
                </div>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  </div>

  <!-- 创建新密钥的弹窗 -->
  <div id="createKeyModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 hidden items-center justify-center">
    <div class="bg-white p-8 rounded-lg shadow-xl" style="width: 500px;">
      <h2 class="text-xl font-bold mb-4">Create New API Key</h2>
      <form id="createKeyForm" method="POST">
        <div class="mb-4">
          <label for="keyTitle" class="block text-sm font-medium text-gray-700">API Key Title</label>
          <input type="text" id="keyTitle" name="title"
                 class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50">
        </div>
        <div class="flex justify-end space-x-2">
          <button type="button" id="cancelBtn" class="px-4 py-2 bg-white text-black border border-black rounded hover:bg-gray-100">Cancel</button>
          <button type="submit" class="px-4 py-2 bg-black text-white rounded hover:bg-gray-800">Create</button>
        </div>
      </form>
    </div>
  </div>

  <!-- 删除确认弹窗 -->
  <div id="deleteConfirmModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 hidden items-center justify-center">
    <div class="bg-white p-8 rounded-lg shadow-xl">
      <h2 class="text-xl font-bold mb-4">Confirm API Key Revocation</h2>
      <p class="mb-6">Are you sure you want to revoke this API key? This action cannot be undone.</p>
      <div class="flex justify-end space-x-2">
        <button id="cancelDeleteBtn" class="px-4 py-2 bg-white text-black border border-black rounded hover:bg-gray-100">Cancel</button>
        <button id="confirmDeleteBtn" class="px-4 py-2 bg-red-500 text-white rounded hover:bg-red-600">Confirm Revocation</button>      </div>
    </div>
  </div>
</Base>

<script is:inline>
  let keyToDelete = null;

  function showDeleteConfirmation(keyId) {
    keyToDelete = keyId;
    const deleteConfirmModal = document.getElementById('deleteConfirmModal');
    deleteConfirmModal.classList.remove('hidden');
    deleteConfirmModal.classList.add('flex');
  }

  function deleteKey() {
    if (keyToDelete) {
      fetch(`/user/keys?id=${keyToDelete}`, { method: 'DELETE' })
        .then(() => window.location.reload())
        .catch(error => console.error('Error:', error));
    }
  }

  document.addEventListener('astro:page-load', () => {
    const createKeyBtn = document.getElementById('createKeyBtn');
    const createKeyModal = document.getElementById('createKeyModal');
    const cancelBtn = document.getElementById('cancelBtn');

    createKeyBtn?.addEventListener('click', () => {
      createKeyModal?.classList.remove('hidden');
      createKeyModal?.classList.add('flex');
    });

    cancelBtn?.addEventListener('click', () => {
      createKeyModal?.classList.add('hidden');
      createKeyModal?.classList.remove('flex');
    });

    const deleteConfirmModal = document.getElementById('deleteConfirmModal');
    const cancelDeleteBtn = document.getElementById('cancelDeleteBtn');
    const confirmDeleteBtn = document.getElementById('confirmDeleteBtn');

    cancelDeleteBtn?.addEventListener('click', () => {
      deleteConfirmModal?.classList.add('hidden');
      deleteConfirmModal?.classList.remove('flex');
    });

    confirmDeleteBtn?.addEventListener('click', () => {
      deleteKey();
      deleteConfirmModal?.classList.add('hidden');
      deleteConfirmModal?.classList.remove('flex');
    });
  });
</script>